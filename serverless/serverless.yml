# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hbtn-api-v2
# app and org for use with dashboard.serverless.com
#app: your-app-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

plugins:
  - serverless-multi-regional-plugin

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ap-northeast-2
  profile: bell
  apiGateway:
    shouldStartNameWithService: true
  environment:
    DB_HOST: ${self:custom.DBHost}
    DB_NAME: ${self:custom.DBName}
    DB_USER: ${self:custom.DBUser}
    DB_PASS: ${self:custom.DBPass}
    WSCONN_DB: ${self:resources.Resources.WsConnectionTable.Properties.TableName}
  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "execute-api:ManageConnections"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"

package:
  patterns:
    - '.*/**'
    - '!*.txt'
    - '!test/**'

custom:
  DBHost: hf-dev.c1dsfak07rhb.ap-northeast-2.rds.amazonaws.com
  DBName: hellobell_v2
  DBUser: hellobell
  DBPass: gntlr?znzl

functions:
  getButtons:
    handler: api/hellobutton.getButtonsByMac
    memorySize: 128
    description: Hello Button get Button list for a store
    events:
      - http:
          path: api/buttons
          method: post
          cors: true
  getButtonsBySID:
    handler: api/hellobutton.getButtonsByStore
    memorySize: 128
    description: Hello Button get Button list by store id
    events:
      - http:
          path: api/buttonsbyid
          method: post
  echo:
    handler: api/hellobutton.echo
    memorySize: 128
    description: Hello Button develop echo
    events:
      - http:
          path: api/echo
          method: post
          cors: true
  echoGet:
    handler: api/hellobutton.echo
    memorySize: 128
    description: Hello Button develop echo GET
    events:
      - http:
          path: api/echo
          method: get
          cors: true

  connect:
    handler: api/websocket.connect
    memorySize: 128
    description: Web socket connect to test
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: api/websocket.disconnect
    memorySize: 128
    description: Web socket disconnect to test
    events:
      - websocket:
          route: $disconnect
  broadcast:
    handler: api/websocket.broadcast
    memorySize: 128
    description: Web socket default to test
    events:
      - websocket:
          route: $default
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    WsConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: WsConnectionId
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
